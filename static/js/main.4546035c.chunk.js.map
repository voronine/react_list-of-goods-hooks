{"version":3,"sources":["App.tsx","Components/GoodCard/index.tsx","Components/GoodList/GoodList.tsx","Components/goodListData.ts","index.tsx"],"names":["SortField","GoodCard","good","GoodList","goods","map","goodsFromServer","App","useState","DefaultSort","sortField","setSortField","isReversed","setIsReversed","visibleGoods","preparedGoods","sort","good1","good2","Alphabet","localeCompare","Id","length","reverse","getPreparedGoods","className","onClick","type","cn","ReactDOM","render","document","getElementById"],"mappings":"6KAQKA,E,0ECJQC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,oBAAI,UAAQ,OAAZ,SACGA,KCAQC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACvC,6BACGA,EAAMC,KAAI,SAAAH,GAAI,OACb,cAAC,EAAD,CAAUA,KAAMA,GAAWA,SCTpBI,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SHFGN,K,eAAAA,E,QAAAA,E,gBAAAA,M,KAwCE,IAAMO,EAAgB,WAC3B,MAAkCC,mBAASR,EAAUS,aAArD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAjCR,SACEV,EADF,GAMG,IAHCM,EAGF,EAHEA,UACAE,EAEF,EAFEA,WAGEG,EAAa,YAAOX,GAmBxB,OAjBIM,IACFK,EAAgBA,EAAcC,MAAK,SAACC,EAAOC,GACzC,OAAQR,GACN,KAAKV,EAAUmB,SAEb,OAAOF,EAAMG,cAAcF,GAE7B,KAAKlB,EAAUqB,GAEb,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,OAKRV,EAAaG,EAAcQ,UAAYR,EAOzBS,CAAiBlB,EAAiB,CACrDI,YACAE,eAGF,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMf,EAAaX,EAAUmB,WACtCQ,KAAK,SACLF,UAAWG,IAAG,iBAAkB,CAC9B,WAAYlB,IAAcV,EAAUmB,WAJxC,iCAUA,wBACEO,QAAS,kBAAMf,EAAaX,EAAUqB,KACtCM,KAAK,SACLF,UAAWG,IAAG,iBAAkB,CAC9B,WAAYlB,IAAcV,EAAUqB,GACpC,YAAaX,IAAcV,EAAUqB,KALzC,4BAWA,wBACEK,QAAS,kBAAMb,GAAeD,IAC9Be,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,YAAahB,EACb,YAAaA,IALjB,sBAWEF,GAAaE,IACb,wBACEc,QAAS,WACPf,EAAaX,EAAUS,aACvBI,GAAc,IAEhBc,KAAK,SACLF,UAAU,4BANZ,sBAaJ,cAAC,EAAD,CAAUrB,MAAOU,QIvGvBe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4546035c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nimport { GoodList } from './Components/GoodList/GoodList';\nimport { goodsFromServer } from './Components/goodListData';\n\nenum SortField {\n  Alphabet = 'abc',\n  Id = 'id',\n  DefaultSort = '',\n}\n\ninterface FilterSort {\n  sortField: SortField;\n  isReversed: boolean;\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  {\n    sortField,\n    isReversed,\n  }: FilterSort,\n) {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods = preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.Alphabet:\n\n          return good1.localeCompare(good2);\n\n        case SortField.Id:\n\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return isReversed ? preparedGoods.reverse() : preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortField.DefaultSort);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, {\n    sortField,\n    isReversed,\n  });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortField.Alphabet)}\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SortField.Alphabet,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortField.Id)}\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SortField.Id,\n            'is-active': sortField === SortField.Id,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setIsReversed(!isReversed)}\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n            'is-active': isReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            onClick={() => {\n              setSortField(SortField.DefaultSort);\n              setIsReversed(false);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodList goods={visibleGoods} />\n    </div>\n  );\n};\n","type Props = {\n  good: string,\n};\n\nexport const GoodCard: React.FC<Props> = ({ good }) => (\n  <li data-cy=\"Good\">\n    {good}\n  </li>\n);\n","import { GoodCard } from '../GoodCard';\n\ntype Props = {\n  goods: string[],\n};\n\nexport const GoodList: React.FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <GoodCard good={good} key={good} />\n    ))}\n  </ul>\n);\n","export const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}